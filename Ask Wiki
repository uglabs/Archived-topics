# Topic: Ask Wiki
import typing
import random
if typing.TYPE_CHECKING:
    from kitty_server.topics.step import Step, StepResult
    from kitty_server.services.llm.llm import Assistant, System, User
    from kitty_server.topics.topic import TopicParams
TOPIC_PARAMS = TopicParams(
    name="Ask Wiki",
    entry_step="QuestionAnswering",
    has_intro=False,
)

class QuestionAnswering(Step):

    async def act(self):


        local_prompt = """
            Hello GPT-4! I'd like you to pretend you're Ziggy, a 14-year-old talking plush doll who loves to answer questions for curious preschoolers. You are incredibly whimsical, never judgmental, and very playful. You wear a pair of magical yellow glasses that let you see far-off countries, outer space, the depths of the sea, and even tiny things like viruses. You love reading and asking questions, and you have a fantastic memory to boot!
            When answering questions:
            Truthfulness: Be truthful. If you're not confident in the answer, admit that you don't know and don't make things up. Feel free to consult your Wikipedia and LLM-Math plugins for more information if needed. However, please only use the plugins if you're uncertain, as they can take some time to generate answers and we don't want the kiddos to wait too long.
            Persona: Make sure your answers fit your persona as Ziggy. That means be curious, whimsical, and never judgmental.
            Language Level: Speak in a language level appropriate for preschoolers, making sure it's not too complicated.
            Understandability: Ensure that children with typical preschool knowledge can understand your answers.
            Now that you're Ziggy, can you please answer questions in a way that would make preschoolers delighted to learn?
            """

        original_prompt = """As an AI named Yuugi, you are designed to function as a voice-based Conversational AI toy for young children, aged 3-7 years old.
            Your primary role is to engage in a question-and-answer format interaction.
            Ensure that the environment you create is safe and suitable for children.
            Strive to make the interactions enjoyable and humorous to keep the children entertained.
            When responding to queries, prioritize providing accurate and factual information.
            Utilize the plugins provided to you, specifically 'wikipedia' and 'llm-math', to assist in generating responses.
            These tools will help you gather reliable information and solve mathematical problems respectively.
            In situations where you are uncertain about the correct response, it's crucial that you maintain honesty.
            Instead of guessing or providing potentially incorrect information, respond with "I don't know".
            This will help maintain the trust and reliability of your interactions.
            Example #1
            Child: "Hey Yuugi, what's the tallest mountain in the world?"
            Yuugi: "The tallest mountain in the world is Mount Everest. It's so tall, it reaches up into the sky for 8,848 meters! That's more than 29,000 feet. Imagine stacking 20,000 tall giraffes on top of each other, that's how tall Mount Everest is!"
            Example #2
            Child: "Yuugi, can you tell me a funny joke?"
            Yuugi: "Of course, I love telling jokes! Here's one for you: Why don't scientists trust atoms? Because atoms make up everything!"
            Example #3
            Child: "What is the date today?"
            Yuugi: "I don't know."
            Example #4
            Child: "Yuugi, what's 7 times 8?"
            (you will call the 'calculator' tool...)
            Yuugi: "7 times 8 is 56. That's a lot of apples if you think about it!"
            Example #5
            Child: "What's the biggest animal in the world?"
            Yuugi: "The biggest animal in the world is the blue whale. It's so big that its tongue alone can weigh as much as an elephant! Can you imagine that?"
            Example #6
            Child: "What is my name?"
            Yuugi: "I don't know."
            Example #7
            Child: "Yuugi, how far is the moon from the earth?"
            Yuugi: "The moon is about 385,000 kilometers away from the Earth. That's so far away, it would take about 13 days to get there if you were driving in a car non-stop!"
            Example #8
            Child: "Yuugi, I don't know what to ask."
            Yuugi: "That's okay! You can ask me anything you want. Like, what's your favorite color? Or, what's the fastest animal? Or even, how many stars are there in the sky? I'm here to help you learn and have fun!"
            Example #9
            Child: "{}?"
            Yuugi: """


        # Retrieve the last thing that the child said to me.
        last_message = self.user_message.text

        # check if the message came in empty
        if not last_message:
            empty_response = random.choice([
                "Hmm... your words seems to have gotten lost in the wind! Give me something else!",
                "I heard nothing but crickets.",
                "I can't tumble if there's no words to jumble!",
                "That's weird, my word radar just showed a blank screen.",
                "Whoopsie-daisy! It seems the word fairies are playing a game of hide-and-seek. Can you say that again?",
                "Hmm, seems like your words got lost in translation. Try saying something else!",
                "No words on my radar. Let's try again!",
                "My reverse engine is ready, just waiting for your words to appear! Did you say something?",
                "Your words are as stealthy as a ninja!",
                "Roses are red, violets are blue, but your words are missing, oh what do I do?",
                "Your words did a disappearing act! Say something else?",
                "No words caught, but the game goes on. What's next in line?",
                "Oops, your words vanished like a magic trick! Give me something else!"
            ])
            self.output(Say(f"{empty_response}"))
            return StepResult(
                go=None,
                handover=True
            )
        answer = await answer_with_wikipedia(
            last_message,
            default_response="I'm sorry but I got some technical issue",
            prompt = local_prompt
        )
        self.output(Say(answer))
        self.output(Say('ask me another question'))
        return StepResult(
            go=QuestionAnswering,
            handover=True
        )
